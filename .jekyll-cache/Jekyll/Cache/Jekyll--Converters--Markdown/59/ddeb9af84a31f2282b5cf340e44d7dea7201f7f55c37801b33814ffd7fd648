I"<h1 id="refactorizaci√≥n-utilizando-pruebas-de-software-en-backend">Refactorizaci√≥n utilizando pruebas de software en Backend</h1>
<p>En este punto la funcionalidad ya est√° completa, pero la organizaci√≥n del c√≥digo se puede mejorar para aumentar su flexibilidad a los cambios que inevitablemente llegar√°n.</p>

<p>Para esto necesitamos una forma de asegurar que no romperemos nada de lo que hemos logrado. La funcionalidad se debe mantener, pero la calidad del c√≥digo debe aumentar. Para esto agregaremos pruebas de software para el c√≥digo tanto en el Backend como en el Frontend.</p>

<h3 id="pruebas-de-software-en-backend">Pruebas de software en Backend</h3>

<p>Utilizaremos tres herramientas populares de Javascript para escribir y ejecutar pruebas: <code class="language-plaintext highlighter-rouge">jest</code>, <code class="language-plaintext highlighter-rouge">jest-cli</code> y <code class="language-plaintext highlighter-rouge">supertest</code>. Primero navegamos a la carpeta <code class="language-plaintext highlighter-rouge">/backend</code> y luego ejecutamos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">--save-dev</span> jest jest-cli supertest 
</code></pre></div></div>
<p>Al igual que como lo hicimos con Sequelize-cli, vamos a exponer el comando de Jest para no tener que instalarlo globalmente. Eso es en el archivo <code class="language-plaintext highlighter-rouge">backend/package.json</code>. Tambi√©n vamos a cambiar el comando de test que viene por defecto. El archivo quedar√≠a de la siguiente forma:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">...</span>
  <span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">nodemon src/server.js</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jest --runInBand --coverage</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">jest</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jest</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">sequelize</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">sequelize</span><span class="dl">"</span>
  <span class="p">},</span>
<span class="p">...</span>
</code></pre></div></div>
<p>Jest tiene la opci√≥n ‚Äìinit para configurar el entorno de pruebas. El comando a ejecutar es el siguiente:
 <code class="language-plaintext highlighter-rouge">npm run jest -- --init</code>
Esto nos har√° una peque√±a serie de preguntas que debemos responder con lo siguiente:</p>

<p><img src="images/06-testing-frontend-backend-01.png" alt="jest --init" /></p>

<p>Ahora continuaremos configurando una base de datos exclusivamente para la ejecuci√≥n de pruebas. Para esto modificamos el archivo <code class="language-plaintext highlighter-rouge">backend/src/config/config.json</code>
en la secci√≥n ‚Äútest‚Äù.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
  <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">...</span>
  <span class="dl">"</span><span class="s2">host</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">test.database.sqlite3</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">dialect</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">sqlite</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">logging</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span>
<span class="p">},</span>
</code></pre></div></div>
<p>Durante la ejecuci√≥n de las pruebas se crear√° una nueva bases de datos que no necesitamos incluir en el repositorio, por lo que agregaremos el nombre  de la base de datos de prueba <code class="language-plaintext highlighter-rouge">test.database.sqlite3</code> al <code class="language-plaintext highlighter-rouge">.gitignore</code>.</p>

<p>Para probar el backend vamos a crear la carpeta <code class="language-plaintext highlighter-rouge">/tests</code> dentro del directorio <code class="language-plaintext highlighter-rouge">backend</code> y crearemos una prueba simple para revisar que est√© todo bien configurado. A este archivo lo llamaremos <code class="language-plaintext highlighter-rouge">auth.test.js</code> ya que es la primera funcionalidad de describimos de nuestro servidor. Su contenido es el siguiente:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../src/server</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Auth middleware</span><span class="dl">'</span><span class="p">,()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">works</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">})</span>

</code></pre></div></div>

<p>Esto lo ejecutamos con el comando que configuramos <code class="language-plaintext highlighter-rouge">npm test</code>. La salida en la terminal de esta ejecuci√≥n es la siguiente:</p>

<p><img src="images/06-testing-frontend-backend-02.png" alt="error-async" /></p>

<p>Tenemos resultados confusos, ya que en concreto la prueba si pasa, pero vemos una indicaci√≥n en rojo de que estamos ejecutando <code class="language-plaintext highlighter-rouge">console.log</code>. En este caso es Express en la llamada <code class="language-plaintext highlighter-rouge">app.listen</code> que hace correr un proceso en forma indefinida y jest queda ejecut√°ndose. Entonces debemos separar lo que vamos a probar (la l√≥gica) de lo que ejecuta el servidor (<code class="language-plaintext highlighter-rouge">listen</code>).</p>

<p>Logramos esto separando el archivo <code class="language-plaintext highlighter-rouge">server.js</code> para que quede de la siguiente forma:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./app</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span>
<span class="kd">const</span> <span class="nx">environment</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`App server listening in mode </span><span class="p">${</span><span class="nx">environment</span><span class="p">}</span><span class="s2"> on port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">})</span>

</code></pre></div></div>
<p>El resto del contenido lo agregaremos aun archivo llamado <code class="language-plaintext highlighter-rouge">app.js</code> tambi√©n en la ra√≠z de Backend con lo siguiente:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">admin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">firebase-admin</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">Models</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./models</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>

<span class="nx">admin</span><span class="p">.</span><span class="nx">initializeApp</span><span class="p">({</span><span class="na">credential</span><span class="p">:</span> <span class="nx">admin</span><span class="p">.</span><span class="nx">credential</span><span class="p">.</span><span class="nx">applicationDefault</span><span class="p">()})</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">headerToken</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">authorization</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">headerToken</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">No token provided</span><span class="dl">'</span> <span class="p">})</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">authorizationType</span><span class="p">,</span> <span class="nx">tokenValue</span><span class="p">]</span> <span class="o">=</span> <span class="nx">headerToken</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">)</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">headerToken</span> <span class="o">&amp;&amp;</span> <span class="nx">authorizationType</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">bearer</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Invalid token</span><span class="dl">'</span> <span class="p">})</span>
  <span class="p">}</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">admin</span><span class="p">.</span><span class="nx">auth</span><span class="p">().</span><span class="nx">verifyIdToken</span><span class="p">(</span><span class="nx">tokenValue</span><span class="p">)</span>
    <span class="nx">next</span><span class="p">()</span>

  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>

    <span class="nx">response</span>
      <span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">403</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Could not authorize</span><span class="dl">'</span> <span class="p">})</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/products</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
  <span class="kd">const</span> <span class="nx">Product</span> <span class="o">=</span> <span class="nx">Models</span><span class="p">.</span><span class="nx">Product</span><span class="p">;</span>
  
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">products</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Product</span><span class="p">.</span><span class="nx">findAll</span><span class="p">()</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`GET with status code </span><span class="p">${</span><span class="nx">statusCode</span><span class="p">}</span><span class="s2"> in /api/products endpoint`</span><span class="p">)</span>

    <span class="k">return</span> <span class="nx">response</span>
      <span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">statusCode</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">products</span><span class="p">)</span>

  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">message</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">error</span>
    <span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">500</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">`GET with status code </span><span class="p">${</span><span class="nx">statusCode</span><span class="p">}</span><span class="s2"> in /api/products endpoint. Error: </span><span class="p">${</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="nx">response</span>
      <span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">statusCode</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">message</span> <span class="p">})</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">app</span>

</code></pre></div></div>
<p>Y modificamos la prueba para requerir el archivo <code class="language-plaintext highlighter-rouge">app.js</code>:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../src/app</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Auth middleware</span><span class="dl">'</span><span class="p">,()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">works</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">})</span>

</code></pre></div></div>
<p>Con estos ajustes la salida de las pruebas queda como indica la siguiente imagen:</p>

<p><img src="images/06-testing-frontend-backend-03.png" alt="jest simple test passing" /></p>

<h4 id="casos-de-la-funcionalidad-para-definir-pruebas">Casos de la funcionalidad para definir pruebas</h4>

<p>En este momento el servidor tiene las siguientes caracter√≠sticas:</p>

<ul>
  <li>Valida que las solicitudes a <code class="language-plaintext highlighter-rouge">/api</code> est√©n autenticadas con 4 casos posibles. 3 casos en los cuales respondemos un c√≥digo de error y uno en el cu√°l resulta exitoso y se deja pasar la solicitud.</li>
</ul>

<p>EL resumen el archivo server tiene los siguientes bloques de c√≥digo para cada uno de los casos.</p>

<p><strong>backend/src/server.js</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">headerToken</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Caso 1 error: no se env√≠a la cabecera "Authorization"</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">headerToken</span> <span class="o">&amp;&amp;</span> <span class="nx">authorizationType</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">bearer</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Caso 2 error: se env√≠a una cabecera "Authorization" que no es del tipo "Bearer"</span>
  <span class="p">}</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="c1">// Caso 3 √©xito: La solicitud fue validada exitosamente</span>
    <span class="c1">// y la solicitud ingresa al servidor ejecutando la funci√≥n "next"</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Caso 4 error: La librer√≠a "firebase-admin" no valida el token enviado</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<ul>
  <li>Las solicitudes ya autenticadas que consultan <code class="language-plaintext highlighter-rouge">/api/products</code> pueden tener 2 casos posibles al hacer consultas a la base de datos.</li>
</ul>

<p><strong>backend/src/server.js</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/products</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="c1">// Caso 1 √©xito: Se consulta la base de datos exitosamente </span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Caso 2 error: Ocurre un error al consultar la base de datos</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>
<p>Estas son las funcionalidades que debemos mantener y que deben resistir el proceso de refactorizaci√≥n.</p>

<p>Es una buena pr√°ctica primero previsualizar los casos a los cuales vamos a escribir las pruebas as√≠ tenemos claro que c√≥digo est√° involucrado en cada uno de los casos y ser√° m√°s f√°cil escribir la implementaci√≥n de la prueba.</p>

<h4 id="implementaci√≥n-de-pruebas-sobre-el-middleware-de-validaci√≥n-de-solicitudes-autorizadas">Implementaci√≥n de pruebas sobre el Middleware de validaci√≥n de solicitudes autorizadas</h4>

<p>Vamos a escribir las pruebas que definimos para los casos que describimos anteriormente.</p>

<h5 id="caso-1-error-no-se-env√≠a-la-cabecera-authorization">Caso 1 error: no se env√≠a la cabecera ‚ÄúAuthorization‚Äù</h5>

<p>Resultado esperado</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Retorna 401 y un mensaje "No token provided" cuando no viene la cabecera de autorizaci√≥n
</code></pre></div></div>
<p>Vamos a escribir el c√≥digo para representar este caso como indica el siguiente c√≥digo:</p>

<p><strong>backend/tests/auth.test.js</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">supertest</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">supertest</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../src/app</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Auth middleware</span><span class="dl">'</span><span class="p">,()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">returns 401 when there is no authorization header</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">supertest</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/any-endpoint</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">toMatchObject</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">No token provided</span><span class="dl">"</span> <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>
<p>Podemos notar como a partir de la librer√≠a <code class="language-plaintext highlighter-rouge">Supertest</code> podemos simular una solicitud al servidor sin necesidad de crear una real pas√°ndole el m√≥dulo de express que en nuestro caso se exporta a trav√©s del valor <code class="language-plaintext highlighter-rouge">app</code>. Esto permite a <code class="language-plaintext highlighter-rouge">Supertest</code> conocer la configuraci√≥n de las rutas que hemos definido para nuestros endpoints y hacer la simulaci√≥n.</p>

<p>En adelante vamos a complementar este archivo agregando los bloques <code class="language-plaintext highlighter-rouge">it</code> dentro del bloque <code class="language-plaintext highlighter-rouge">describe</code> en el mismo orden que hicimos nuestro an√°lisis</p>

<h5 id="caso-2-error-se-env√≠a-una-cabecera-authorization-que-no-es-del-tipo-bearer">Caso 2 error: se env√≠a una cabecera ‚ÄúAuthorization‚Äù que no es del tipo ‚ÄúBearer‚Äù</h5>
<p>Resultado esperado</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Retorna 401 y un mensaje "Invalid token" cuando el token no es de tipo Bearer
</code></pre></div></div>

<p>El c√≥digo que representa este caso es como indica el siguiente c√≥digo:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">returns 401 when the token is not a bearer token</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">supertest</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/fake</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Token faketoken</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">toMatchObject</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Invalid token</span><span class="dl">'</span> <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>

<h5 id="caso-3-√©xito-la-solicitud-fue-validada-exitosamente-y-la-solicitud-ingresa-al-servidor-ejecutando-la-funci√≥n-next">Caso 3 √©xito: La solicitud fue validada exitosamente y la solicitud ingresa al servidor ejecutando la funci√≥n ‚Äúnext‚Äù</h5>

<p>Resultado esperado</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Al validar el token deja pasar la petici√≥n ejecutando la funci√≥n "next"
</code></pre></div></div>

<p>Este caso no lo implementaremos ac√° ya que cuando hagamos las pruebas del endpoint <code class="language-plaintext highlighter-rouge">GET /api/products</code> estaremos pasando por este middleware y ser√° impl√≠cito que la prueba pasa por la funci√≥n <code class="language-plaintext highlighter-rouge">next</code></p>

<h5 id="caso-4-error-la-librer√≠a-firebase-admin-no-valida-el-token-enviado">Caso 4 error: La librer√≠a ‚Äúfirebase-admin‚Äù no valida el token enviado</h5>

<p>Resultado esperado</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Retorna 403 y un mensaje "Could not authorize" cuando el token es de tipo Bearer, pero no es v√°lido
</code></pre></div></div>

<p>En este caso debemos crear un mock de la librer√≠a <code class="language-plaintext highlighter-rouge">firebase-admin</code> para simular que el llamado al m√©todo <code class="language-plaintext highlighter-rouge">verifyIdToken</code> tome el comportamiento que necesitemos para la prueba. 
Primero modificaremos las funciones que utilizamos de <code class="language-plaintext highlighter-rouge">firebase-admin</code> para que la prueba se ejecute sin errores:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">supertest</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">supertest</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../src/app</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">admin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">firebase-admin</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="dl">'</span><span class="s1">firebase-admin</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">auth</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">mockReturnValue</span><span class="p">({</span> <span class="na">verifyIdToken</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()</span> <span class="p">}),</span>
  <span class="na">credential</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">applicationDefault</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
  <span class="p">},</span>
  <span class="na">initializeApp</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()</span>
<span class="p">}))</span>
<span class="p">...</span>
</code></pre></div></div>

<p>Ahora s√≠ podemos agregar el √∫ltimo <code class="language-plaintext highlighter-rouge">it</code> en el que forzaremos un rechazo de la promesa en la funci√≥n <code class="language-plaintext highlighter-rouge">verifyIdToken</code>, para simular que se entreg√≥ un token inv√°lido.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">returns 403 when an invalid token is passed</span><span class="dl">'</span><span class="p">,</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">admin</span><span class="p">.</span><span class="nx">auth</span><span class="p">().</span><span class="nx">verifyIdToken</span><span class="p">.</span><span class="nx">mockRejectedValue</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">())</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">supertest</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/fake</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Bearer faketoken</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">403</span><span class="p">)</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">toMatchObject</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Could not authorize</span><span class="dl">'</span> <span class="p">})</span>
<span class="p">})</span>

</code></pre></div></div>
<p>Ejecutamos y vemos que en la ultima prueba jest incluso nos muestra el <code class="language-plaintext highlighter-rouge">console.error</code> que se debe ejecutar en el c√≥digo de la aplicaci√≥n cuando llega un token inv√°lido. Lo puedes ver en el siguiente screenshot:</p>

<p><img src="images/06-testing-frontend-backend-04.png" alt="jest auth test" /></p>

<p>Con todo lo anterior el c√≥digo completo del archivo <code class="language-plaintext highlighter-rouge">auth.test.js</code> queda de la siguiente forma:</p>

<p><strong>backend/tests/auth.test.js</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">supertest</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">supertest</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../src/app</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">admin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">firebase-admin</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="dl">'</span><span class="s1">firebase-admin</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">auth</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">().</span><span class="nx">mockReturnValue</span><span class="p">({</span> <span class="na">verifyIdToken</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()</span> <span class="p">}),</span>
  <span class="na">credential</span><span class="p">:</span> <span class="p">{</span>
  <span class="na">applicationDefault</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
  <span class="p">},</span>
  <span class="na">initializeApp</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()</span>
<span class="p">}))</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Auth middleware</span><span class="dl">'</span><span class="p">,()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">returns 401 when there is no authorization header</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">supertest</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/fake</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">toMatchObject</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">No token provided</span><span class="dl">'</span> <span class="p">})</span>
  <span class="p">})</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">returns 401 when the token is not a bearer token</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">supertest</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/fake</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Token faketoken</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">toMatchObject</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Invalid token</span><span class="dl">'</span> <span class="p">})</span>
  <span class="p">})</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">returns 403 when an invalid token is passed</span><span class="dl">'</span><span class="p">,</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">admin</span><span class="p">.</span><span class="nx">auth</span><span class="p">().</span><span class="nx">verifyIdToken</span><span class="p">.</span><span class="nx">mockRejectedValue</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">());</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">supertest</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/fake</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Bearer faketoken</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">403</span><span class="p">)</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">toMatchObject</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Could not authorize</span><span class="dl">'</span> <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>

</code></pre></div></div>

<p>Antes de continuar vamos a echar un vistazo a una nueva carpeta que se ha creado en la ra√≠z del directorio <code class="language-plaintext highlighter-rouge">backend</code> llamada <code class="language-plaintext highlighter-rouge">coverage</code>. En su interior veremos otro directorio llamado <code class="language-plaintext highlighter-rouge">lcov-report</code> y en su interior un archivo <code class="language-plaintext highlighter-rouge">index.html</code>
Si lo abrimos con un navegador web veremos algo como lo siguiente:</p>

<p><img src="images/06-testing-frontend-backend-05.png" alt="Imagen que muestra reporte de cobertura en el navegador" /></p>

<p>Luego si hacemos click en <code class="language-plaintext highlighter-rouge">src</code> y luego en <code class="language-plaintext highlighter-rouge">app.js</code> veremos lo que muestra la siguiente imagen:</p>

<p><img src="images/06-testing-frontend-backend-06.png" alt="Imagen que muestra reporte de cobertura en el navegador" /></p>

<p>Podemos ver claramente como es que el informe de cobertura nos muestra que a√∫n no hemos escrito pruebas que ejecuten los c√≥digos remarcados en la imagen.</p>

<p>‚ö†Ô∏è Ahora vamos a agregar al archivo <code class="language-plaintext highlighter-rouge">.gitignore</code> el directorio <code class="language-plaintext highlighter-rouge">coverage</code> porque es importante que este informe sea regenerado por cada ejecuci√≥n de las pruebas pero no lo necesitamos como parte del repositorio.</p>

<p>Seguimos adelante con las pruebas cuando la solicitud pasa el middleware de autorizaci√≥n y solicita el listado de productos.</p>

<h4 id="implementaci√≥n-de-pruebas-para-endpoints-de-productos">Implementaci√≥n de pruebas para endpoints de productos</h4>

<p>Vamos a escribir las pruebas del endpoint <code class="language-plaintext highlighter-rouge">GET /api/products</code>:</p>

<h5 id="caso-1-√©xito-se-consulta-la-base-de-datos-exitosamente">Caso 1 √©xito: Se consulta la base de datos exitosamente</h5>

<p>Resultado esperado</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Retorna 200 y una lista de productos que previamente fueron insertados en la base de datos
</code></pre></div></div>

<p>Haremos un nuevo archivo dentro del directorio <code class="language-plaintext highlighter-rouge">backend/tests</code> llamado <code class="language-plaintext highlighter-rouge">products.test.js</code>.</p>

<p>Este es un caso m√°s complejo, porque debemos simular (usando dobles de prueba) que la solicitud cumple con los requisitos de autorizaci√≥n, de otra forma nuestro c√≥digo no se ejecutar√°. Adem√°s necesitamos probar que la aplicaci√≥n entrega el arreglo de productos definido en los Fixtures, por lo que hay agregar estos datos a la BDD antes de enviar la solicitud. 
Esto lo podemos lograr con las funciones <code class="language-plaintext highlighter-rouge">beforeAll</code> y <code class="language-plaintext highlighter-rouge">afterAll</code> que se ejecutar√°n al inicio y al final de todas las pruebas respectivamente con el objetivo de sincronizar la base de datos y correr las migraciones a trav√©s de <code class="language-plaintext highlighter-rouge">Models.sequelize.sync</code>.</p>

<p>La prueba queda de la siguiente forma:</p>

<p><strong>backend/tests/products.test.js</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">supertest</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">supertest</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">admin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">firebase-admin</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../src/app</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">Models</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../src/models</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">productsFixture</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../../fixtures/products.json</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="dl">'</span><span class="s1">firebase-admin</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">auth</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">().</span><span class="nx">mockReturnValue</span><span class="p">({</span> <span class="na">verifyIdToken</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()</span> <span class="p">}),</span>
  <span class="na">credential</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">applicationDefault</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
  <span class="p">},</span>
  <span class="na">initializeApp</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()</span>
<span class="p">}))</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/products</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span><span class="p">{</span>

  <span class="nx">beforeAll</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Models</span><span class="p">.</span><span class="nx">sequelize</span><span class="p">.</span><span class="nx">sync</span><span class="p">({</span> <span class="na">force</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
    <span class="nx">admin</span><span class="p">.</span><span class="nx">auth</span><span class="p">().</span><span class="nx">verifyIdToken</span><span class="p">.</span><span class="nx">mockResolvedValue</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
  <span class="p">})</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">returns an array of products</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Models</span><span class="p">.</span><span class="nx">Product</span><span class="p">.</span><span class="nx">bulkCreate</span><span class="p">(</span><span class="nx">productsFixture</span><span class="p">)</span>
    
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">supertest</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/products</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Bearer valid-token</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">toMatchObject</span><span class="p">(</span><span class="nx">productsFixture</span><span class="p">)</span>
  <span class="p">})</span>

  <span class="nx">afterAll</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Models</span><span class="p">.</span><span class="nx">sequelize</span><span class="p">.</span><span class="nx">close</span><span class="p">()</span>
  <span class="p">})</span>
<span class="p">})</span>

</code></pre></div></div>

<h5 id="caso-2-error-ocurre-un-error-al-consultar-la-base-de-datos">Caso 2 error: Ocurre un error al consultar la base de datos</h5>

<p>Resultado esperado</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Retorna 500 y un mensaje con el error de la base de datos
</code></pre></div></div>

<p>Para hacer que la base de datos falle, lo que haremos ser√° destruir la table <code class="language-plaintext highlighter-rouge">Products</code> a trav√©s de Sequelize utilizando el m√©todo <code class="language-plaintext highlighter-rouge">drop</code>.
Agregaremos el siguiente bloque <code class="language-plaintext highlighter-rouge">it</code> bajo del que ya escribimos en el archivo <code class="language-plaintext highlighter-rouge">backend/tests/products.test.js</code></p>

<p><strong>backend/tests/auth.test.js</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">returns 500 when the database throws error</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Models</span><span class="p">.</span><span class="nx">Product</span><span class="p">.</span><span class="nx">drop</span><span class="p">()</span>

    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">supertest</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/products</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Bearer valid-token</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">toMatchObject</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">SQLITE_ERROR: no such table: Products</span><span class="dl">'</span> <span class="p">})</span>
  <span class="p">})</span>
</code></pre></div></div>

<p>al correr el comando <code class="language-plaintext highlighter-rouge">npm test</code> deber√≠amos ver todas las pruebas pasando como muestra la siguiente imagen:</p>

<p><img src="images/06-testing-frontend-backend-07.png" alt="Imagen que muestra todas las pruebas de Backend pasando" /></p>

<p>Podemos validar que ahora estamos cubriendo toda la funcionalidad construida hasta el momento con nuestras pruebas revisando tal como lo hicimos anteriormente en el archivo en el directorio <code class="language-plaintext highlighter-rouge">coverage</code>.</p>

<p><img src="images/06-testing-frontend-backend-08.png" alt="Imagen que muestra la cobertura de las pruebas en el archivo app.js" /></p>

<p>Ahora con toda nuestra funcionalidad cubierta con las pruebas pasando, volvemos a refactorizar para dividir los controladores, middleware y rutas siguiendo los gu√≠as SOLID.</p>

<p>Vamos a re-estructurar el proyecto para que quede de la siguiente forma</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;backend&gt;
‚îú‚îÄ‚îÄ coverage
‚îú‚îÄ‚îÄ node_modules
‚îú‚îÄ‚îÄ src
    ‚îú‚îÄ‚îÄ config
    ‚îú‚îÄ‚îÄ controllers &lt;<span class="nt">--</span> directorio nuevo y archivo
        products.js
    ‚îú‚îÄ‚îÄ middleware &lt;<span class="nt">--</span> directorio nuevo y archivo
        auth.js
    ‚îú‚îÄ‚îÄ migrations
    ‚îú‚îÄ‚îÄ models
    ‚îú‚îÄ‚îÄ routes &lt;<span class="nt">--</span> directorio nuevo y archivo
        index.js
    ‚îú‚îÄ‚îÄ seeders
    app.js
    server.js
‚îú‚îÄ‚îÄ tests
    auth.test.js
    products.test.js
.sequelizesrc
firebase-service-account.json
jest.config.js
local.database.sqlite3
nodemon.json
package-lock.json
package.json
test.database.sqlite3
</code></pre></div></div>
<p>Ahora vamos a mostrar el contenido de los 4 archivos involucrados en la refactorizaci√≥n</p>

<p><strong>backend/controllers/products.js</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Models</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../models</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">Product</span> <span class="o">=</span> <span class="nx">Models</span><span class="p">.</span><span class="nx">Product</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="k">async</span> <span class="nx">index</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>

    <span class="k">try</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">products</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Product</span><span class="p">.</span><span class="nx">findAll</span><span class="p">()</span>
  
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`GET with status code </span><span class="p">${</span><span class="nx">statusCode</span><span class="p">}</span><span class="s2"> in /api/products endpoint`</span><span class="p">)</span>
  
      <span class="k">return</span> <span class="nx">response</span>
        <span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">statusCode</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">products</span><span class="p">)</span>
  
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="p">{</span> <span class="nx">message</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">error</span>
      <span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">500</span>
  
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">`GET with status code </span><span class="p">${</span><span class="nx">statusCode</span><span class="p">}</span><span class="s2"> in /api/products endpoint. Error: </span><span class="p">${</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
      
      <span class="k">return</span> <span class="nx">response</span>
        <span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">statusCode</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">message</span> <span class="p">})</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>backend/middleware/auth.js</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">admin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">firebase-admin</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">admin</span><span class="p">.</span><span class="nx">initializeApp</span><span class="p">({</span> <span class="na">credential</span><span class="p">:</span> <span class="nx">admin</span><span class="p">.</span><span class="nx">credential</span><span class="p">.</span><span class="nx">applicationDefault</span><span class="p">()</span> <span class="p">})</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">headerToken</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">authorization</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">headerToken</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">No token provided</span><span class="dl">'</span> <span class="p">})</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">authorizationType</span><span class="p">,</span> <span class="nx">tokenValue</span><span class="p">]</span> <span class="o">=</span> <span class="nx">headerToken</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">)</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">headerToken</span> <span class="o">&amp;&amp;</span> <span class="nx">authorizationType</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">bearer</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Invalid token</span><span class="dl">'</span> <span class="p">})</span>
  <span class="p">}</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">admin</span><span class="p">.</span><span class="nx">auth</span><span class="p">().</span><span class="nx">verifyIdToken</span><span class="p">(</span><span class="nx">tokenValue</span><span class="p">)</span>
    <span class="nx">next</span><span class="p">()</span>

  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>

    <span class="nx">response</span>
      <span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">403</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Could not authorize</span><span class="dl">'</span> <span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>backend/routes/index.js</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">productsController</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../controllers/products</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/products</span><span class="dl">'</span><span class="p">,</span> <span class="nx">productsController</span><span class="p">.</span><span class="nx">index</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>

</code></pre></div></div>

<p><strong>backend/app.js</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">authMiddleware</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./middleware/auth</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./routes</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span><span class="p">,</span> <span class="nx">authMiddleware</span><span class="p">)</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span><span class="p">,</span> <span class="nx">routes</span><span class="p">)</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">app</span>

</code></pre></div></div>

<p>Volvemos a correr el comando <code class="language-plaintext highlighter-rouge">npm test</code>  y veremos que el informe de cobertura nos muestra la nueva distribuci√≥n de los archivos que fueron ejecutados en las pruebas.</p>

<p><img src="images/06-testing-frontend-backend-09.png" alt="Imagen que muestra la cobertura de las pruebas en la terminal" /></p>

<p>De esta manera logramos hacer una refactorizaci√≥n para ordenar y preparar al c√≥digo del servidor para ser m√°s escalable para los futuros incrementos del c√≥digo.</p>

<p>Momento de un nuevo commit. Escribimos lo siguiente en la terminal:</p>

<p>‚ö†Ô∏è Debes est√°n posicionado en la ra√≠z del proyecto.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"refactor(backend-refactor): Se agreg√≥ set de pruebas de caracterizaci√≥n en el Backend y luego un refactor para dividir responsabilidades"</span>
</code></pre></div></div>

<table>
  <tr>
    <th colspan="2">
      <a href="./05-database-sequelize.md">
        <span>‚¨ÖÔ∏è </span>
       Agregando base de datos en desarrollo
      </a>
    </th>
    <th colspan="2">
      <a href="./07-testing-frontend.md">Pruebas de software para Frontend
        <span>‚û°Ô∏è </span>
      </a>
    </th>
  </tr>
</table>
:ET